require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/assignments", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Assignment. As you add validations to Assignment, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  describe "GET /index" do
    it "renders a successful response" do
      Assignment.create! valid_attributes
      get assignments_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      assignment = Assignment.create! valid_attributes
      get assignment_url(assignment)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      # mock session current_user
      user = User.create!(name: "Test User", email: "test@test.net", role: "instructor")
      allow_any_instance_of(ApplicationController).to receive(:current_user).and_return(user)
      get new_assignment_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      assignment = Assignment.create! valid_attributes
      get edit_assignment_url(assignment)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Assignment" do
        expect {
          post assignments_url, params: { assignment: valid_attributes }
        }.to change(Assignment, :count).by(1)
      end

      it "redirects to the created assignment" do
        post assignments_url, params: { assignment: valid_attributes }
        expect(response).to redirect_to(assignment_url(Assignment.last))
      end
    end

    context "when the operation fails" do
      before do
        # Stub File.exist? to return false, simulating file creation failure
        allow(File).to receive(:exist?).and_return(false)
      end

      it "displays an error message" do
        get create_and_download_zip_assignment_path(assignment)

        # Check for redirection to the assignment page with the error
        expect(response).to redirect_to(assignment_path(assignment))
        follow_redirect!

        # Check for the error message
        expect(flash[:alert]).to be_present
        expect(flash[:alert]).to eq("ZIP file not found. Please ensure the make command works correctly.")
      end
    end
  end

  let!(:assignment) { Assignment.create!(assignment_name: "Assignment 1", repository_name: "assignment-1") }
  let(:git_folder) { '/Users/walkerjames/Autograded_frontend_new/test_app' }
  let(:original_zip_file) { File.join(git_folder, 'autograder.zip') }
  let(:zip_file_path) { File.join(git_folder, "#{assignment.assignment_name}.zip") }

  before do
    # Stub the system call to avoid actually running it
    allow_any_instance_of(Object).to receive(:system).and_return(true)
  end

  describe "GET /assignments/:id/create_and_download_zip" do
    context "when the operation is successful" do
      before do
        # Stub File.exist? to return true, simulating successful file creation
        allow(File).to receive(:exist?).and_return(true)
        # Stub File.rename to avoid actual file renaming
        allow(File).to receive(:rename).and_return(true)
      end

      it "displays a success message" do
        get create_and_download_zip_assignment_path(assignment)

        # Check for a 200 OK response (since `send_file` typically results in a 200 OK)
        expect(response).to have_http_status(:ok)

        # Check for the success message on the page
        expect(flash[:notice]).to be_present
        expect(flash[:notice]).to eq("#{assignment.assignment_name}.zip downloaded successfully")
      end
    end

    context "when the operation fails" do
      before do
        # Stub File.exist? to return false, simulating file creation failure
        allow(File).to receive(:exist?).and_return(false)
      end

      it "displays an error message" do
        get create_and_download_zip_assignment_path(assignment)

        # Check for redirection to the assignment page with the error
        expect(response).to redirect_to(assignment_path(assignment))
        follow_redirect!

        # Check for the error message
        expect(flash[:alert]).to be_present
        expect(flash[:alert]).to eq("ZIP file not found. Please ensure the make command works correctly.")
      end
    end
  end
end
